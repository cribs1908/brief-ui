{"version":3,"sources":["turbopack:///[project]/brief-ui/src/app/api/chat/override/route.ts","turbopack:///[project]/brief-ui/node_modules/next/dist/esm/build/templates/app-route.js","turbopack:///[project]/brief-ui/src/lib/synonym-map.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { getSupabaseAdmin } from '@/lib/supabase';\nimport { createSynonymMap } from '@/lib/synonym-map';\n\nexport async function POST(req: Request) {\n\ttry {\n\t\tconst body = await req.json();\n\t\tconst { runId, fieldId, value, unit, userId = null } = body || {};\n\t\tif (!runId || !fieldId) return NextResponse.json({ error: 'runId and fieldId required' }, { status: 400 });\n\t\t\n\t\tconst supa = getSupabaseAdmin();\n\t\t\n\t\t// Get run info for workspace\n\t\tconst { data: runData } = await supa.from('runs_new').select('workspace_id').eq('id', runId).maybeSingle();\n\t\tif (!runData) return NextResponse.json({ error: 'Run not found' }, { status: 404 });\n\t\t\n\t\t// Save override\n\t\tconst { data, error } = await supa.from('overrides').insert({ \n\t\t\trun_id: runId, \n\t\t\tfield_id: fieldId, \n\t\t\tvalue, \n\t\t\tunit, \n\t\t\tuser_id: userId \n\t\t}).select('*').maybeSingle();\n\t\tif (error) throw error;\n\t\t\n\t\t// Update synonym map with strong signal\n\t\tconst synonymMap = await createSynonymMap(runData.workspace_id);\n\t\tawait synonymMap.recordOverride(fieldId, value);\n\t\t\n\t\t// Audit log\n\t\tawait supa.from('audit_logs').insert({ \n\t\t\tactor: userId || 'system', \n\t\t\taction: 'override', \n\t\t\ttarget: runId, \n\t\t\tmetadata: { fieldId, value, unit, originalValue: body.originalValue } \n\t\t});\n\t\t\n\t\treturn NextResponse.json({ ok: true, override: data });\n\t} catch (e: any) {\n\t\treturn NextResponse.json({ error: e.message || 'Internal error' }, { status: 503 });\n\t}\n}\n","import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/chat/override/route\",\n        pathname: \"/api/chat/override\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/brief-ui/src/app/api/chat/override/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/chat/override/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","import { getSupabaseAdmin } from './supabase';\n\nexport interface SynonymEntry {\n\tid: string;\n\tfieldId: string;\n\tvariants: string[];\n\tscore: number;\n\tworkspaceId?: string; // null = global\n\tcreatedAt: Date;\n\tupdatedAt: Date;\n}\n\nexport interface SynonymMapSnapshot {\n\tworkspaceId: string;\n\tversion: string;\n\tentries: Record<string, string[]>; // fieldId -> variants\n\ttimestamp: Date;\n}\n\nexport class SynonymMap {\n\tprivate workspaceId: string;\n\tprivate snapshot: Record<string, string[]> = {};\n\tprivate version: string;\n\n\tconstructor(workspaceId: string, version: string = 'latest') {\n\t\tthis.workspaceId = workspaceId;\n\t\tthis.version = version;\n\t}\n\n\t// Carica snapshot della synonym map per questo workspace\n\tasync loadSnapshot(): Promise<void> {\n\t\tconst supa = getSupabaseAdmin();\n\t\t\n\t\t// Load workspace-specific synonyms\n\t\tconst { data: workspaceSyns } = await supa\n\t\t\t.from('synonyms_workspace')\n\t\t\t.select('field_id, variants, score')\n\t\t\t.eq('workspace_id', this.workspaceId);\n\n\t\t// Load global synonyms\n\t\tconst { data: globalSyns } = await supa\n\t\t\t.from('synonyms_global')\n\t\t\t.select('field_id, variants, score');\n\n\t\tthis.snapshot = {};\n\n\t\t// Merge global first, then workspace (workspace overrides global)\n\t\tfor (const syn of globalSyns || []) {\n\t\t\tthis.snapshot[syn.field_id] = syn.variants || [];\n\t\t}\n\n\t\tfor (const syn of workspaceSyns || []) {\n\t\t\tthis.snapshot[syn.field_id] = [\n\t\t\t\t...(this.snapshot[syn.field_id] || []),\n\t\t\t\t...(syn.variants || [])\n\t\t\t].filter((v, i, arr) => arr.indexOf(v) === i); // dedupe\n\t\t}\n\t}\n\n\t// Trova field ID canonico dato un termine\n\tfindCanonicalField(term: string): string | null {\n\t\tconst termLower = term.toLowerCase().trim();\n\t\t\n\t\tfor (const [fieldId, variants] of Object.entries(this.snapshot)) {\n\t\t\t// Exact match con field ID\n\t\t\tif (fieldId.toLowerCase() === termLower) return fieldId;\n\t\t\t\n\t\t\t// Match con varianti\n\t\t\tif (variants.some(v => v.toLowerCase() === termLower)) return fieldId;\n\t\t\t\n\t\t\t// Fuzzy match (substring)\n\t\t\tif (variants.some(v => v.toLowerCase().includes(termLower) || termLower.includes(v.toLowerCase()))) {\n\t\t\t\treturn fieldId;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Suggerisci field ID basato su similarità\n\tsuggestFields(term: string, limit: number = 3): Array<{ fieldId: string; score: number }> {\n\t\tconst termLower = term.toLowerCase().trim();\n\t\tconst suggestions: Array<{ fieldId: string; score: number }> = [];\n\n\t\tfor (const [fieldId, variants] of Object.entries(this.snapshot)) {\n\t\t\tlet maxScore = 0;\n\n\t\t\t// Score per field ID\n\t\t\tmaxScore = Math.max(maxScore, this.calculateSimilarity(termLower, fieldId.toLowerCase()));\n\n\t\t\t// Score per varianti\n\t\t\tfor (const variant of variants) {\n\t\t\t\tmaxScore = Math.max(maxScore, this.calculateSimilarity(termLower, variant.toLowerCase()));\n\t\t\t}\n\n\t\t\tif (maxScore > 0.3) { // Threshold minimo\n\t\t\t\tsuggestions.push({ fieldId, score: maxScore });\n\t\t\t}\n\t\t}\n\n\t\treturn suggestions\n\t\t\t.sort((a, b) => b.score - a.score)\n\t\t\t.slice(0, limit);\n\t}\n\n\t// Calcola similarità Levenshtein semplificata\n\tprivate calculateSimilarity(a: string, b: string): number {\n\t\tif (a === b) return 1.0;\n\t\tif (a.includes(b) || b.includes(a)) return 0.8;\n\t\t\n\t\tconst maxLen = Math.max(a.length, b.length);\n\t\tif (maxLen === 0) return 1.0;\n\t\t\n\t\tconst distance = this.levenshteinDistance(a, b);\n\t\treturn 1 - (distance / maxLen);\n\t}\n\n\tprivate levenshteinDistance(a: string, b: string): number {\n\t\tconst matrix = [];\n\t\tfor (let i = 0; i <= b.length; i++) {\n\t\t\tmatrix[i] = [i];\n\t\t}\n\t\tfor (let j = 0; j <= a.length; j++) {\n\t\t\tmatrix[0][j] = j;\n\t\t}\n\t\tfor (let i = 1; i <= b.length; i++) {\n\t\t\tfor (let j = 1; j <= a.length; j++) {\n\t\t\t\tif (b.charAt(i - 1) === a.charAt(j - 1)) {\n\t\t\t\t\tmatrix[i][j] = matrix[i - 1][j - 1];\n\t\t\t\t} else {\n\t\t\t\t\tmatrix[i][j] = Math.min(\n\t\t\t\t\t\tmatrix[i - 1][j - 1] + 1,\n\t\t\t\t\t\tmatrix[i][j - 1] + 1,\n\t\t\t\t\t\tmatrix[i - 1][j] + 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn matrix[b.length][a.length];\n\t}\n\n\t// Registra un match di successo (rinforza sinonimo)\n\tasync recordMatchSuccess(fieldId: string, term: string): Promise<void> {\n\t\tawait this.updateSynonym(fieldId, term, 'match_success');\n\t}\n\n\t// Registra un override applicato (nuovo mapping forte)\n\tasync recordOverride(fieldId: string, term: string): Promise<void> {\n\t\tawait this.updateSynonym(fieldId, term, 'override_applied');\n\t}\n\n\t// Registra un candidato visto (propone variante debole)\n\tasync recordCandidateSeen(fieldId: string, term: string): Promise<void> {\n\t\tawait this.updateSynonym(fieldId, term, 'candidate_seen');\n\t}\n\n\tprivate async updateSynonym(fieldId: string, term: string, action: 'match_success' | 'override_applied' | 'candidate_seen'): Promise<void> {\n\t\tconst supa = getSupabaseAdmin();\n\t\tconst termLower = term.toLowerCase().trim();\n\n\t\t// Check if workspace synonym exists\n\t\tconst { data: existing } = await supa\n\t\t\t.from('synonyms_workspace')\n\t\t\t.select('*')\n\t\t\t.eq('workspace_id', this.workspaceId)\n\t\t\t.eq('field_id', fieldId)\n\t\t\t.maybeSingle();\n\n\t\tlet newVariants: string[];\n\t\tlet newScore: number;\n\n\t\tif (existing) {\n\t\t\tnewVariants = [...(existing.variants || [])];\n\t\t\tif (!newVariants.includes(termLower)) {\n\t\t\t\tnewVariants.push(termLower);\n\t\t\t}\n\t\t\t\n\t\t\t// Update score based on action\n\t\t\tswitch (action) {\n\t\t\t\tcase 'match_success':\n\t\t\t\t\tnewScore = Math.min(1.0, existing.score + 0.1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'override_applied':\n\t\t\t\t\tnewScore = Math.min(1.0, existing.score + 0.3);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'candidate_seen':\n\t\t\t\t\tnewScore = Math.min(1.0, existing.score + 0.05);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tawait supa\n\t\t\t\t.from('synonyms_workspace')\n\t\t\t\t.update({\n\t\t\t\t\tvariants: newVariants,\n\t\t\t\t\tscore: newScore,\n\t\t\t\t\tupdated_at: new Date().toISOString()\n\t\t\t\t})\n\t\t\t\t.eq('id', existing.id);\n\t\t} else {\n\t\t\t// Create new synonym entry\n\t\t\tnewVariants = [termLower];\n\t\t\tswitch (action) {\n\t\t\t\tcase 'match_success':\n\t\t\t\t\tnewScore = 0.7;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'override_applied':\n\t\t\t\t\tnewScore = 0.9;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'candidate_seen':\n\t\t\t\t\tnewScore = 0.3;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tawait supa\n\t\t\t\t.from('synonyms_workspace')\n\t\t\t\t.insert({\n\t\t\t\t\tworkspace_id: this.workspaceId,\n\t\t\t\t\tfield_id: fieldId,\n\t\t\t\t\tvariants: newVariants,\n\t\t\t\t\tscore: newScore\n\t\t\t\t});\n\t\t}\n\n\t\t// Consider promoting to global if score is high enough and seen across workspaces\n\t\tif (newScore >= 0.8) {\n\t\t\tawait this.considerGlobalPromotion(fieldId, termLower);\n\t\t}\n\t}\n\n\tprivate async considerGlobalPromotion(fieldId: string, term: string): Promise<void> {\n\t\tconst supa = getSupabaseAdmin();\n\n\t\t// Check how many workspaces have this synonym\n\t\tconst { data: workspaceCount } = await supa\n\t\t\t.from('synonyms_workspace')\n\t\t\t.select('workspace_id')\n\t\t\t.eq('field_id', fieldId)\n\t\t\t.contains('variants', [term]);\n\n\t\t// Promote to global if seen in 3+ workspaces\n\t\tif (workspaceCount && workspaceCount.length >= 3) {\n\t\t\tconst { data: globalEntry } = await supa\n\t\t\t\t.from('synonyms_global')\n\t\t\t\t.select('*')\n\t\t\t\t.eq('field_id', fieldId)\n\t\t\t\t.maybeSingle();\n\n\t\t\tif (globalEntry) {\n\t\t\t\tconst variants = [...(globalEntry.variants || [])];\n\t\t\t\tif (!variants.includes(term)) {\n\t\t\t\t\tvariants.push(term);\n\t\t\t\t\tawait supa\n\t\t\t\t\t\t.from('synonyms_global')\n\t\t\t\t\t\t.update({\n\t\t\t\t\t\t\tvariants,\n\t\t\t\t\t\t\tscore: Math.min(1.0, globalEntry.score + 0.2),\n\t\t\t\t\t\t\tupdated_at: new Date().toISOString()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.eq('id', globalEntry.id);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tawait supa\n\t\t\t\t\t.from('synonyms_global')\n\t\t\t\t\t.insert({\n\t\t\t\t\t\tfield_id: fieldId,\n\t\t\t\t\t\tvariants: [term],\n\t\t\t\t\t\tscore: 0.8\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t// Ottieni snapshot corrente\n\tgetSnapshot(): SynonymMapSnapshot {\n\t\treturn {\n\t\t\tworkspaceId: this.workspaceId,\n\t\t\tversion: this.version,\n\t\t\tentries: { ...this.snapshot },\n\t\t\ttimestamp: new Date()\n\t\t};\n\t}\n}\n\n// Factory per creare SynonymMap\nexport async function createSynonymMap(workspaceId: string): Promise<SynonymMap> {\n\tconst map = new SynonymMap(workspaceId);\n\tawait map.loadSnapshot();\n\treturn map;\n}\n\n// Seed initial synonyms per domain\nexport async function seedDomainSynonyms(workspaceId: string, domain: string): Promise<void> {\n\tconst supa = getSupabaseAdmin();\n\n\tconst domainSeeds: Record<string, Record<string, string[]>> = {\n\t\t'SaaS': {\n\t\t\t'pricing': ['price', 'cost', 'fee', 'rate', 'charge'],\n\t\t\t'api_latency': ['latency', 'response_time', 'delay', 'lag'],\n\t\t\t'sla': ['uptime', 'availability', 'service_level'],\n\t\t\t'security': ['security_score', 'security_rating', 'sec_score'],\n\t\t\t'auth_type': ['authentication', 'auth', 'login_method'],\n\t\t\t'onboarding': ['setup_time', 'implementation', 'go_live'],\n\t\t\t'nps': ['nps_score', 'satisfaction', 'customer_satisfaction']\n\t\t},\n\t\t'API': {\n\t\t\t'rate_limit': ['rate_limiting', 'throttling', 'request_limit'],\n\t\t\t'auth_type': ['authentication', 'auth_method', 'security'],\n\t\t\t'response_format': ['format', 'output_format', 'data_format'],\n\t\t\t'documentation': ['docs', 'api_docs', 'documentation_quality'],\n\t\t\t'sdk_support': ['sdks', 'libraries', 'client_libraries']\n\t\t},\n\t\t'Chip': {\n\t\t\t'voltage': ['vdd', 'supply_voltage', 'operating_voltage', 'v_supply'],\n\t\t\t'current': ['idd', 'supply_current', 'operating_current', 'i_supply'],\n\t\t\t'frequency': ['freq', 'clock', 'operating_frequency', 'max_freq'],\n\t\t\t'power': ['power_consumption', 'power_draw', 'p_total'],\n\t\t\t'temperature': ['temp_range', 'operating_temp', 'ambient_temp'],\n\t\t\t'package': ['packaging', 'form_factor', 'pin_count']\n\t\t}\n\t};\n\n\tconst seeds = domainSeeds[domain];\n\tif (!seeds) return;\n\n\tfor (const [fieldId, variants] of Object.entries(seeds)) {\n\t\tconst { data: existing } = await supa\n\t\t\t.from('synonyms_workspace')\n\t\t\t.select('id')\n\t\t\t.eq('workspace_id', workspaceId)\n\t\t\t.eq('field_id', fieldId)\n\t\t\t.maybeSingle();\n\n\t\tif (!existing) {\n\t\t\tawait supa\n\t\t\t\t.from('synonyms_workspace')\n\t\t\t\t.insert({\n\t\t\t\t\tworkspace_id: workspaceId,\n\t\t\t\t\tfield_id: fieldId,\n\t\t\t\t\tvariants,\n\t\t\t\t\tscore: 0.6 // Seed score\n\t\t\t\t});\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[1]}