{"version":3,"sources":["turbopack:///[project]/brief-ui/node_modules/@clerk/nextjs/src/server/keyless-node.ts"],"sourcesContent":["import type { AccountlessApplication } from '@clerk/backend';\n\nimport { createClerkClientWithOptions } from './createClerkClient';\nimport { nodeCwdOrThrow, nodeFsOrThrow, nodePathOrThrow } from './fs/utils';\nimport { collectKeylessMetadata, formatMetadataHeaders } from './keyless-custom-headers';\n\n/**\n * The Clerk-specific directory name.\n */\nconst CLERK_HIDDEN = '.clerk';\n\n/**\n * The Clerk-specific lock file that is used to mitigate multiple key creation.\n * This is automatically cleaned up.\n */\nconst CLERK_LOCK = 'clerk.lock';\n\n/**\n * The `.clerk/` directory is NOT safe to be committed as it may include sensitive information about a Clerk instance.\n * It may include an instance's secret key and the secret token for claiming that instance.\n */\nfunction updateGitignore() {\n  const { existsSync, writeFileSync, readFileSync, appendFileSync } = nodeFsOrThrow();\n\n  const path = nodePathOrThrow();\n  const cwd = nodeCwdOrThrow();\n  const gitignorePath = path.join(cwd(), '.gitignore');\n  if (!existsSync(gitignorePath)) {\n    writeFileSync(gitignorePath, '');\n  }\n\n  // Check if `.clerk/` entry exists in .gitignore\n  const gitignoreContent = readFileSync(gitignorePath, 'utf-8');\n  const COMMENT = `# clerk configuration (can include secrets)`;\n  if (!gitignoreContent.includes(CLERK_HIDDEN + '/')) {\n    appendFileSync(gitignorePath, `\\n${COMMENT}\\n/${CLERK_HIDDEN}/\\n`);\n  }\n}\n\nconst generatePath = (...slugs: string[]) => {\n  const path = nodePathOrThrow();\n  const cwd = nodeCwdOrThrow();\n  return path.join(cwd(), CLERK_HIDDEN, ...slugs);\n};\n\nconst _TEMP_DIR_NAME = '.tmp';\nconst getKeylessConfigurationPath = () => generatePath(_TEMP_DIR_NAME, 'keyless.json');\nconst getKeylessReadMePath = () => generatePath(_TEMP_DIR_NAME, 'README.md');\n\nlet isCreatingFile = false;\n\nexport function safeParseClerkFile(): AccountlessApplication | undefined {\n  const { readFileSync } = nodeFsOrThrow();\n  try {\n    const CONFIG_PATH = getKeylessConfigurationPath();\n    let fileAsString;\n    try {\n      fileAsString = readFileSync(CONFIG_PATH, { encoding: 'utf-8' }) || '{}';\n    } catch {\n      fileAsString = '{}';\n    }\n    return JSON.parse(fileAsString) as AccountlessApplication;\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Using both an in-memory and file system lock seems to be the most effective solution.\n */\nconst lockFileWriting = () => {\n  const { writeFileSync } = nodeFsOrThrow();\n\n  isCreatingFile = true;\n\n  writeFileSync(\n    CLERK_LOCK,\n    // In the rare case, the file persists give the developer enough context.\n    'This file can be deleted. Please delete this file and refresh your application',\n    {\n      encoding: 'utf8',\n      mode: '0777',\n      flag: 'w',\n    },\n  );\n};\n\nconst unlockFileWriting = () => {\n  const { rmSync } = nodeFsOrThrow();\n\n  try {\n    rmSync(CLERK_LOCK, { force: true, recursive: true });\n  } catch {\n    // Simply ignore if the removal of the directory/file fails\n  }\n\n  isCreatingFile = false;\n};\n\nconst isFileWritingLocked = () => {\n  const { existsSync } = nodeFsOrThrow();\n  return isCreatingFile || existsSync(CLERK_LOCK);\n};\n\nasync function createOrReadKeyless(): Promise<AccountlessApplication | null> {\n  const { writeFileSync, mkdirSync } = nodeFsOrThrow();\n\n  /**\n   * If another request is already in the process of acquiring keys return early.\n   * Using both an in-memory and file system lock seems to be the most effective solution.\n   */\n  if (isFileWritingLocked()) {\n    return null;\n  }\n\n  lockFileWriting();\n\n  const CONFIG_PATH = getKeylessConfigurationPath();\n  const README_PATH = getKeylessReadMePath();\n\n  mkdirSync(generatePath(_TEMP_DIR_NAME), { recursive: true });\n  updateGitignore();\n\n  /**\n   * When the configuration file exists, always read the keys from the file\n   */\n  const envVarsMap = safeParseClerkFile();\n  if (envVarsMap?.publishableKey && envVarsMap?.secretKey) {\n    unlockFileWriting();\n\n    return envVarsMap;\n  }\n\n  /**\n   * At this step, it is safe to create new keys and store them.\n   */\n  const client = createClerkClientWithOptions({});\n\n  // Collect metadata\n  const keylessHeaders = await collectKeylessMetadata()\n    .then(formatMetadataHeaders)\n    .catch(() => new Headers());\n\n  const accountlessApplication = await client.__experimental_accountlessApplications\n    .createAccountlessApplication({ requestHeaders: keylessHeaders })\n    .catch(() => null);\n\n  if (accountlessApplication) {\n    writeFileSync(CONFIG_PATH, JSON.stringify(accountlessApplication), {\n      encoding: 'utf8',\n      mode: '0777',\n      flag: 'w',\n    });\n\n    // TODO-KEYLESS: Add link to official documentation.\n    const README_NOTIFICATION = `\n## DO NOT COMMIT\nThis directory is auto-generated from \\`@clerk/nextjs\\` because you are running in Keyless mode. Avoid committing the \\`.clerk/\\` directory as it includes the secret key of the unclaimed instance.\n  `;\n\n    writeFileSync(README_PATH, README_NOTIFICATION, {\n      encoding: 'utf8',\n      mode: '0777',\n      flag: 'w',\n    });\n  }\n  /**\n   * Clean up locks.\n   */\n  unlockFileWriting();\n\n  return accountlessApplication;\n}\n\nfunction removeKeyless() {\n  const { rmSync } = nodeFsOrThrow();\n\n  /**\n   * If another request is already in the process of acquiring keys return early.\n   * Using both an in-memory and file system lock seems to be the most effective solution.\n   */\n  if (isFileWritingLocked()) {\n    return undefined;\n  }\n\n  lockFileWriting();\n\n  try {\n    rmSync(generatePath(), { force: true, recursive: true });\n  } catch {\n    // Simply ignore if the removal of the directory/file fails\n  }\n\n  /**\n   * Clean up locks.\n   */\n  unlockFileWriting();\n}\n\nexport { createOrReadKeyless, removeKeyless };\n"],"names":[],"mappings":"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"}